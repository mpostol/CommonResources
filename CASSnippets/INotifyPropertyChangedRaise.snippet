<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippet Format="1.0.0" xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <Header>
    <Title>Notify property change raise helper</Title>
    <Author>CAS</Author>
    <Description>
      A generic static method called extension of PropertyChangedEventHandler that takes five arguments:
      - the event handler,
      - the property's new value (given by the value keyword in C# in the property SET accessor),
      - the property's old value by reference which is the private member variable used to hold the property value at all times,
      - a string representing the property name
      - the sender of the event (the object that owns the event represented by the event handler).
    </Description>
    <Shortcut>inpcr</Shortcut>
    <SnippetTypes>
      <SnippetType>Expansion</SnippetType>
    </SnippetTypes>
  </Header>
  <Snippet>
    <Declarations>
      <Literal>
        <ID>name</ID>
        <Default>value</Default>
      </Literal>
    </Declarations>
    <Code Language="CSharp">
      <![CDATA[
  /// <summary>
  /// Extension method that sets a new value in a variable and then executes the event handler if the new value
  /// differs from the old one.  Used to easily implement INotifyPropeprtyChanged.
  /// </summary>
  /// <typeparam name="T">The type of values being handled (usually the type of the property).</typeparam>
  /// <param name="handler">The event handler to execute in the event of actual value change.</param>
  /// <param name="newValue">The new value to set.</param>
  /// <param name="oldValue">The old value to replace (and the value holder).</param>
  /// <param name="propertyName">The property's name as required by <typeparamref name="System.ComponentModel.PropertyChangedEventArgs"/>.</param>
  /// <param name="sender">The object to be appointed as the executioner of the handler.</param>
  /// <returns>A boolean value that indicates if the new value was truly different from the old value according to <code>object.Equals()</code>.</returns>
  public static bool RaiseHandler<T>(this PropertyChangedEventHandler handler, T newValue, ref T oldValue, string propertyName, object sender)
  {
    bool changed = !Object.Equals(oldValue, newValue);
    if (changed)
    {
      //Save the new value. 
      oldValue = newValue;
      //Raise the event 
      if (handler != null)
      {
        handler(sender, new PropertyChangedEventArgs(propertyName));
      }
    }
    //Signal what happened. 
    return changed;
  }
    ]]>
    </Code>
  </Snippet>
</CodeSnippet>